// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_plan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_plan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "schema.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_plan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_plan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_plan_2eproto;
namespace milvus {
namespace proto {
namespace plan {
class Expr;
class ExprDefaultTypeInternal;
extern ExprDefaultTypeInternal _Expr_default_instance_;
class GenericValue;
class GenericValueDefaultTypeInternal;
extern GenericValueDefaultTypeInternal _GenericValue_default_instance_;
class PlanNode;
class PlanNodeDefaultTypeInternal;
extern PlanNodeDefaultTypeInternal _PlanNode_default_instance_;
class QueryInfo;
class QueryInfoDefaultTypeInternal;
extern QueryInfoDefaultTypeInternal _QueryInfo_default_instance_;
class RangeExpr;
class RangeExprDefaultTypeInternal;
extern RangeExprDefaultTypeInternal _RangeExpr_default_instance_;
class VectorANNS;
class VectorANNSDefaultTypeInternal;
extern VectorANNSDefaultTypeInternal _VectorANNS_default_instance_;
}  // namespace plan
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> ::milvus::proto::plan::Expr* Arena::CreateMaybeMessage<::milvus::proto::plan::Expr>(Arena*);
template<> ::milvus::proto::plan::GenericValue* Arena::CreateMaybeMessage<::milvus::proto::plan::GenericValue>(Arena*);
template<> ::milvus::proto::plan::PlanNode* Arena::CreateMaybeMessage<::milvus::proto::plan::PlanNode>(Arena*);
template<> ::milvus::proto::plan::QueryInfo* Arena::CreateMaybeMessage<::milvus::proto::plan::QueryInfo>(Arena*);
template<> ::milvus::proto::plan::RangeExpr* Arena::CreateMaybeMessage<::milvus::proto::plan::RangeExpr>(Arena*);
template<> ::milvus::proto::plan::VectorANNS* Arena::CreateMaybeMessage<::milvus::proto::plan::VectorANNS>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace milvus {
namespace proto {
namespace plan {

enum RangeExpr_OpType : int {
  RangeExpr_OpType_Invalid = 0,
  RangeExpr_OpType_GreaterThan = 1,
  RangeExpr_OpType_GreaterEqual = 2,
  RangeExpr_OpType_LessThan = 3,
  RangeExpr_OpType_LessEqual = 4,
  RangeExpr_OpType_Equal = 5,
  RangeExpr_OpType_NotEqual = 6,
  RangeExpr_OpType_RangeExpr_OpType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RangeExpr_OpType_RangeExpr_OpType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RangeExpr_OpType_IsValid(int value);
constexpr RangeExpr_OpType RangeExpr_OpType_OpType_MIN = RangeExpr_OpType_Invalid;
constexpr RangeExpr_OpType RangeExpr_OpType_OpType_MAX = RangeExpr_OpType_NotEqual;
constexpr int RangeExpr_OpType_OpType_ARRAYSIZE = RangeExpr_OpType_OpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RangeExpr_OpType_descriptor();
template<typename T>
inline const std::string& RangeExpr_OpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RangeExpr_OpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RangeExpr_OpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RangeExpr_OpType_descriptor(), enum_t_value);
}
inline bool RangeExpr_OpType_Parse(
    const std::string& name, RangeExpr_OpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RangeExpr_OpType>(
    RangeExpr_OpType_descriptor(), name, value);
}
// ===================================================================

class GenericValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.plan.GenericValue) */ {
 public:
  GenericValue();
  virtual ~GenericValue();

  GenericValue(const GenericValue& from);
  GenericValue(GenericValue&& from) noexcept
    : GenericValue() {
    *this = ::std::move(from);
  }

  inline GenericValue& operator=(const GenericValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericValue& operator=(GenericValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenericValue& default_instance();

  enum ValCase {
    kBoolVal = 1,
    kInt64Val = 2,
    kFloatVal = 3,
    VAL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericValue* internal_default_instance() {
    return reinterpret_cast<const GenericValue*>(
               &_GenericValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenericValue& a, GenericValue& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericValue* New() const final {
    return CreateMaybeMessage<GenericValue>(nullptr);
  }

  GenericValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenericValue& from);
  void MergeFrom(const GenericValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.plan.GenericValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plan_2eproto);
    return ::descriptor_table_plan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoolValFieldNumber = 1,
    kInt64ValFieldNumber = 2,
    kFloatValFieldNumber = 3,
  };
  // bool bool_val = 1;
  private:
  bool has_bool_val() const;
  public:
  void clear_bool_val();
  bool bool_val() const;
  void set_bool_val(bool value);

  // int64 int64_val = 2;
  private:
  bool has_int64_val() const;
  public:
  void clear_int64_val();
  ::PROTOBUF_NAMESPACE_ID::int64 int64_val() const;
  void set_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double float_val = 3;
  private:
  bool has_float_val() const;
  public:
  void clear_float_val();
  double float_val() const;
  void set_float_val(double value);

  void clear_val();
  ValCase val_case() const;
  // @@protoc_insertion_point(class_scope:milvus.proto.plan.GenericValue)
 private:
  class _Internal;
  void set_has_bool_val();
  void set_has_int64_val();
  void set_has_float_val();

  inline bool has_val() const;
  inline void clear_has_val();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ValUnion {
    ValUnion() {}
    bool bool_val_;
    ::PROTOBUF_NAMESPACE_ID::int64 int64_val_;
    double float_val_;
  } val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_plan_2eproto;
};
// -------------------------------------------------------------------

class QueryInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.plan.QueryInfo) */ {
 public:
  QueryInfo();
  virtual ~QueryInfo();

  QueryInfo(const QueryInfo& from);
  QueryInfo(QueryInfo&& from) noexcept
    : QueryInfo() {
    *this = ::std::move(from);
  }

  inline QueryInfo& operator=(const QueryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryInfo& operator=(QueryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryInfo* internal_default_instance() {
    return reinterpret_cast<const QueryInfo*>(
               &_QueryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryInfo& a, QueryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryInfo* New() const final {
    return CreateMaybeMessage<QueryInfo>(nullptr);
  }

  QueryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryInfo& from);
  void MergeFrom(const QueryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.plan.QueryInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plan_2eproto);
    return ::descriptor_table_plan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricTypeFieldNumber = 3,
    kSearchParamsFieldNumber = 4,
    kTopkFieldNumber = 1,
  };
  // string metric_type = 3;
  void clear_metric_type();
  const std::string& metric_type() const;
  void set_metric_type(const std::string& value);
  void set_metric_type(std::string&& value);
  void set_metric_type(const char* value);
  void set_metric_type(const char* value, size_t size);
  std::string* mutable_metric_type();
  std::string* release_metric_type();
  void set_allocated_metric_type(std::string* metric_type);

  // string search_params = 4;
  void clear_search_params();
  const std::string& search_params() const;
  void set_search_params(const std::string& value);
  void set_search_params(std::string&& value);
  void set_search_params(const char* value);
  void set_search_params(const char* value, size_t size);
  std::string* mutable_search_params();
  std::string* release_search_params();
  void set_allocated_search_params(std::string* search_params);

  // int64 topk = 1;
  void clear_topk();
  ::PROTOBUF_NAMESPACE_ID::int64 topk() const;
  void set_topk(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.plan.QueryInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_params_;
  ::PROTOBUF_NAMESPACE_ID::int64 topk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plan_2eproto;
};
// -------------------------------------------------------------------

class RangeExpr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.plan.RangeExpr) */ {
 public:
  RangeExpr();
  virtual ~RangeExpr();

  RangeExpr(const RangeExpr& from);
  RangeExpr(RangeExpr&& from) noexcept
    : RangeExpr() {
    *this = ::std::move(from);
  }

  inline RangeExpr& operator=(const RangeExpr& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeExpr& operator=(RangeExpr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RangeExpr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeExpr* internal_default_instance() {
    return reinterpret_cast<const RangeExpr*>(
               &_RangeExpr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RangeExpr& a, RangeExpr& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeExpr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeExpr* New() const final {
    return CreateMaybeMessage<RangeExpr>(nullptr);
  }

  RangeExpr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeExpr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeExpr& from);
  void MergeFrom(const RangeExpr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeExpr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.plan.RangeExpr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plan_2eproto);
    return ::descriptor_table_plan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RangeExpr_OpType OpType;
  static constexpr OpType Invalid =
    RangeExpr_OpType_Invalid;
  static constexpr OpType GreaterThan =
    RangeExpr_OpType_GreaterThan;
  static constexpr OpType GreaterEqual =
    RangeExpr_OpType_GreaterEqual;
  static constexpr OpType LessThan =
    RangeExpr_OpType_LessThan;
  static constexpr OpType LessEqual =
    RangeExpr_OpType_LessEqual;
  static constexpr OpType Equal =
    RangeExpr_OpType_Equal;
  static constexpr OpType NotEqual =
    RangeExpr_OpType_NotEqual;
  static inline bool OpType_IsValid(int value) {
    return RangeExpr_OpType_IsValid(value);
  }
  static constexpr OpType OpType_MIN =
    RangeExpr_OpType_OpType_MIN;
  static constexpr OpType OpType_MAX =
    RangeExpr_OpType_OpType_MAX;
  static constexpr int OpType_ARRAYSIZE =
    RangeExpr_OpType_OpType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OpType_descriptor() {
    return RangeExpr_OpType_descriptor();
  }
  template<typename T>
  static inline const std::string& OpType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OpType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OpType_Name.");
    return RangeExpr_OpType_Name(enum_t_value);
  }
  static inline bool OpType_Parse(const std::string& name,
      OpType* value) {
    return RangeExpr_OpType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOpsFieldNumber = 3,
    kValuesFieldNumber = 4,
    kFieldIdFieldNumber = 1,
    kDataTypeFieldNumber = 2,
  };
  // repeated .milvus.proto.plan.RangeExpr.OpType ops = 3;
  int ops_size() const;
  void clear_ops();
  ::milvus::proto::plan::RangeExpr_OpType ops(int index) const;
  void set_ops(int index, ::milvus::proto::plan::RangeExpr_OpType value);
  void add_ops(::milvus::proto::plan::RangeExpr_OpType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_ops();

  // repeated .milvus.proto.plan.GenericValue values = 4;
  int values_size() const;
  void clear_values();
  ::milvus::proto::plan::GenericValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::plan::GenericValue >*
      mutable_values();
  const ::milvus::proto::plan::GenericValue& values(int index) const;
  ::milvus::proto::plan::GenericValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::plan::GenericValue >&
      values() const;

  // int64 field_id = 1;
  void clear_field_id();
  ::PROTOBUF_NAMESPACE_ID::int64 field_id() const;
  void set_field_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .milvus.proto.schema.DataType data_type = 2;
  void clear_data_type();
  ::milvus::proto::schema::DataType data_type() const;
  void set_data_type(::milvus::proto::schema::DataType value);

  // @@protoc_insertion_point(class_scope:milvus.proto.plan.RangeExpr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> ops_;
  mutable std::atomic<int> _ops_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::plan::GenericValue > values_;
  ::PROTOBUF_NAMESPACE_ID::int64 field_id_;
  int data_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plan_2eproto;
};
// -------------------------------------------------------------------

class Expr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.plan.Expr) */ {
 public:
  Expr();
  virtual ~Expr();

  Expr(const Expr& from);
  Expr(Expr&& from) noexcept
    : Expr() {
    *this = ::std::move(from);
  }

  inline Expr& operator=(const Expr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr& operator=(Expr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expr& default_instance();

  enum ExprCase {
    kRangeExpr = 1,
    EXPR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expr* internal_default_instance() {
    return reinterpret_cast<const Expr*>(
               &_Expr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Expr& a, Expr& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expr* New() const final {
    return CreateMaybeMessage<Expr>(nullptr);
  }

  Expr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expr& from);
  void MergeFrom(const Expr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.plan.Expr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plan_2eproto);
    return ::descriptor_table_plan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeExprFieldNumber = 1,
  };
  // .milvus.proto.plan.RangeExpr range_expr = 1;
  bool has_range_expr() const;
  void clear_range_expr();
  const ::milvus::proto::plan::RangeExpr& range_expr() const;
  ::milvus::proto::plan::RangeExpr* release_range_expr();
  ::milvus::proto::plan::RangeExpr* mutable_range_expr();
  void set_allocated_range_expr(::milvus::proto::plan::RangeExpr* range_expr);

  void clear_expr();
  ExprCase expr_case() const;
  // @@protoc_insertion_point(class_scope:milvus.proto.plan.Expr)
 private:
  class _Internal;
  void set_has_range_expr();

  inline bool has_expr() const;
  inline void clear_has_expr();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ExprUnion {
    ExprUnion() {}
    ::milvus::proto::plan::RangeExpr* range_expr_;
  } expr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_plan_2eproto;
};
// -------------------------------------------------------------------

class VectorANNS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.plan.VectorANNS) */ {
 public:
  VectorANNS();
  virtual ~VectorANNS();

  VectorANNS(const VectorANNS& from);
  VectorANNS(VectorANNS&& from) noexcept
    : VectorANNS() {
    *this = ::std::move(from);
  }

  inline VectorANNS& operator=(const VectorANNS& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorANNS& operator=(VectorANNS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorANNS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorANNS* internal_default_instance() {
    return reinterpret_cast<const VectorANNS*>(
               &_VectorANNS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VectorANNS& a, VectorANNS& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorANNS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorANNS* New() const final {
    return CreateMaybeMessage<VectorANNS>(nullptr);
  }

  VectorANNS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorANNS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorANNS& from);
  void MergeFrom(const VectorANNS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorANNS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.plan.VectorANNS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plan_2eproto);
    return ::descriptor_table_plan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceholderTagFieldNumber = 5,
    kPredicatesFieldNumber = 3,
    kQueryInfoFieldNumber = 4,
    kFieldIdFieldNumber = 2,
    kIsBinaryFieldNumber = 1,
  };
  // string placeholder_tag = 5;
  void clear_placeholder_tag();
  const std::string& placeholder_tag() const;
  void set_placeholder_tag(const std::string& value);
  void set_placeholder_tag(std::string&& value);
  void set_placeholder_tag(const char* value);
  void set_placeholder_tag(const char* value, size_t size);
  std::string* mutable_placeholder_tag();
  std::string* release_placeholder_tag();
  void set_allocated_placeholder_tag(std::string* placeholder_tag);

  // .milvus.proto.plan.Expr predicates = 3;
  bool has_predicates() const;
  void clear_predicates();
  const ::milvus::proto::plan::Expr& predicates() const;
  ::milvus::proto::plan::Expr* release_predicates();
  ::milvus::proto::plan::Expr* mutable_predicates();
  void set_allocated_predicates(::milvus::proto::plan::Expr* predicates);

  // .milvus.proto.plan.QueryInfo query_info = 4;
  bool has_query_info() const;
  void clear_query_info();
  const ::milvus::proto::plan::QueryInfo& query_info() const;
  ::milvus::proto::plan::QueryInfo* release_query_info();
  ::milvus::proto::plan::QueryInfo* mutable_query_info();
  void set_allocated_query_info(::milvus::proto::plan::QueryInfo* query_info);

  // int64 field_id = 2;
  void clear_field_id();
  ::PROTOBUF_NAMESPACE_ID::int64 field_id() const;
  void set_field_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool is_binary = 1;
  void clear_is_binary();
  bool is_binary() const;
  void set_is_binary(bool value);

  // @@protoc_insertion_point(class_scope:milvus.proto.plan.VectorANNS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placeholder_tag_;
  ::milvus::proto::plan::Expr* predicates_;
  ::milvus::proto::plan::QueryInfo* query_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 field_id_;
  bool is_binary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plan_2eproto;
};
// -------------------------------------------------------------------

class PlanNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.plan.PlanNode) */ {
 public:
  PlanNode();
  virtual ~PlanNode();

  PlanNode(const PlanNode& from);
  PlanNode(PlanNode&& from) noexcept
    : PlanNode() {
    *this = ::std::move(from);
  }

  inline PlanNode& operator=(const PlanNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanNode& operator=(PlanNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanNode& default_instance();

  enum NodeCase {
    kVectorAnns = 1,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanNode* internal_default_instance() {
    return reinterpret_cast<const PlanNode*>(
               &_PlanNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlanNode& a, PlanNode& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanNode* New() const final {
    return CreateMaybeMessage<PlanNode>(nullptr);
  }

  PlanNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanNode& from);
  void MergeFrom(const PlanNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.plan.PlanNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plan_2eproto);
    return ::descriptor_table_plan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorAnnsFieldNumber = 1,
  };
  // .milvus.proto.plan.VectorANNS vector_anns = 1;
  bool has_vector_anns() const;
  void clear_vector_anns();
  const ::milvus::proto::plan::VectorANNS& vector_anns() const;
  ::milvus::proto::plan::VectorANNS* release_vector_anns();
  ::milvus::proto::plan::VectorANNS* mutable_vector_anns();
  void set_allocated_vector_anns(::milvus::proto::plan::VectorANNS* vector_anns);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:milvus.proto.plan.PlanNode)
 private:
  class _Internal;
  void set_has_vector_anns();

  inline bool has_node() const;
  inline void clear_has_node();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union NodeUnion {
    NodeUnion() {}
    ::milvus::proto::plan::VectorANNS* vector_anns_;
  } node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_plan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GenericValue

// bool bool_val = 1;
inline bool GenericValue::has_bool_val() const {
  return val_case() == kBoolVal;
}
inline void GenericValue::set_has_bool_val() {
  _oneof_case_[0] = kBoolVal;
}
inline void GenericValue::clear_bool_val() {
  if (has_bool_val()) {
    val_.bool_val_ = false;
    clear_has_val();
  }
}
inline bool GenericValue::bool_val() const {
  // @@protoc_insertion_point(field_get:milvus.proto.plan.GenericValue.bool_val)
  if (has_bool_val()) {
    return val_.bool_val_;
  }
  return false;
}
inline void GenericValue::set_bool_val(bool value) {
  if (!has_bool_val()) {
    clear_val();
    set_has_bool_val();
  }
  val_.bool_val_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.plan.GenericValue.bool_val)
}

// int64 int64_val = 2;
inline bool GenericValue::has_int64_val() const {
  return val_case() == kInt64Val;
}
inline void GenericValue::set_has_int64_val() {
  _oneof_case_[0] = kInt64Val;
}
inline void GenericValue::clear_int64_val() {
  if (has_int64_val()) {
    val_.int64_val_ = PROTOBUF_LONGLONG(0);
    clear_has_val();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericValue::int64_val() const {
  // @@protoc_insertion_point(field_get:milvus.proto.plan.GenericValue.int64_val)
  if (has_int64_val()) {
    return val_.int64_val_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void GenericValue::set_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_int64_val()) {
    clear_val();
    set_has_int64_val();
  }
  val_.int64_val_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.plan.GenericValue.int64_val)
}

// double float_val = 3;
inline bool GenericValue::has_float_val() const {
  return val_case() == kFloatVal;
}
inline void GenericValue::set_has_float_val() {
  _oneof_case_[0] = kFloatVal;
}
inline void GenericValue::clear_float_val() {
  if (has_float_val()) {
    val_.float_val_ = 0;
    clear_has_val();
  }
}
inline double GenericValue::float_val() const {
  // @@protoc_insertion_point(field_get:milvus.proto.plan.GenericValue.float_val)
  if (has_float_val()) {
    return val_.float_val_;
  }
  return 0;
}
inline void GenericValue::set_float_val(double value) {
  if (!has_float_val()) {
    clear_val();
    set_has_float_val();
  }
  val_.float_val_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.plan.GenericValue.float_val)
}

inline bool GenericValue::has_val() const {
  return val_case() != VAL_NOT_SET;
}
inline void GenericValue::clear_has_val() {
  _oneof_case_[0] = VAL_NOT_SET;
}
inline GenericValue::ValCase GenericValue::val_case() const {
  return GenericValue::ValCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QueryInfo

// int64 topk = 1;
inline void QueryInfo::clear_topk() {
  topk_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryInfo::topk() const {
  // @@protoc_insertion_point(field_get:milvus.proto.plan.QueryInfo.topk)
  return topk_;
}
inline void QueryInfo::set_topk(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  topk_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.plan.QueryInfo.topk)
}

// string metric_type = 3;
inline void QueryInfo::clear_metric_type() {
  metric_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryInfo::metric_type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.plan.QueryInfo.metric_type)
  return metric_type_.GetNoArena();
}
inline void QueryInfo::set_metric_type(const std::string& value) {
  
  metric_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.plan.QueryInfo.metric_type)
}
inline void QueryInfo::set_metric_type(std::string&& value) {
  
  metric_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.plan.QueryInfo.metric_type)
}
inline void QueryInfo::set_metric_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metric_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.plan.QueryInfo.metric_type)
}
inline void QueryInfo::set_metric_type(const char* value, size_t size) {
  
  metric_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.plan.QueryInfo.metric_type)
}
inline std::string* QueryInfo::mutable_metric_type() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.plan.QueryInfo.metric_type)
  return metric_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryInfo::release_metric_type() {
  // @@protoc_insertion_point(field_release:milvus.proto.plan.QueryInfo.metric_type)
  
  return metric_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryInfo::set_allocated_metric_type(std::string* metric_type) {
  if (metric_type != nullptr) {
    
  } else {
    
  }
  metric_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metric_type);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.QueryInfo.metric_type)
}

// string search_params = 4;
inline void QueryInfo::clear_search_params() {
  search_params_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryInfo::search_params() const {
  // @@protoc_insertion_point(field_get:milvus.proto.plan.QueryInfo.search_params)
  return search_params_.GetNoArena();
}
inline void QueryInfo::set_search_params(const std::string& value) {
  
  search_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.plan.QueryInfo.search_params)
}
inline void QueryInfo::set_search_params(std::string&& value) {
  
  search_params_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.plan.QueryInfo.search_params)
}
inline void QueryInfo::set_search_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  search_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.plan.QueryInfo.search_params)
}
inline void QueryInfo::set_search_params(const char* value, size_t size) {
  
  search_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.plan.QueryInfo.search_params)
}
inline std::string* QueryInfo::mutable_search_params() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.plan.QueryInfo.search_params)
  return search_params_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryInfo::release_search_params() {
  // @@protoc_insertion_point(field_release:milvus.proto.plan.QueryInfo.search_params)
  
  return search_params_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryInfo::set_allocated_search_params(std::string* search_params) {
  if (search_params != nullptr) {
    
  } else {
    
  }
  search_params_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_params);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.QueryInfo.search_params)
}

// -------------------------------------------------------------------

// RangeExpr

// int64 field_id = 1;
inline void RangeExpr::clear_field_id() {
  field_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeExpr::field_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.plan.RangeExpr.field_id)
  return field_id_;
}
inline void RangeExpr::set_field_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.plan.RangeExpr.field_id)
}

// .milvus.proto.schema.DataType data_type = 2;
inline void RangeExpr::clear_data_type() {
  data_type_ = 0;
}
inline ::milvus::proto::schema::DataType RangeExpr::data_type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.plan.RangeExpr.data_type)
  return static_cast< ::milvus::proto::schema::DataType >(data_type_);
}
inline void RangeExpr::set_data_type(::milvus::proto::schema::DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.plan.RangeExpr.data_type)
}

// repeated .milvus.proto.plan.RangeExpr.OpType ops = 3;
inline int RangeExpr::ops_size() const {
  return ops_.size();
}
inline void RangeExpr::clear_ops() {
  ops_.Clear();
}
inline ::milvus::proto::plan::RangeExpr_OpType RangeExpr::ops(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.plan.RangeExpr.ops)
  return static_cast< ::milvus::proto::plan::RangeExpr_OpType >(ops_.Get(index));
}
inline void RangeExpr::set_ops(int index, ::milvus::proto::plan::RangeExpr_OpType value) {
  ops_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.plan.RangeExpr.ops)
}
inline void RangeExpr::add_ops(::milvus::proto::plan::RangeExpr_OpType value) {
  ops_.Add(value);
  // @@protoc_insertion_point(field_add:milvus.proto.plan.RangeExpr.ops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
RangeExpr::ops() const {
  // @@protoc_insertion_point(field_list:milvus.proto.plan.RangeExpr.ops)
  return ops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
RangeExpr::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.plan.RangeExpr.ops)
  return &ops_;
}

// repeated .milvus.proto.plan.GenericValue values = 4;
inline int RangeExpr::values_size() const {
  return values_.size();
}
inline void RangeExpr::clear_values() {
  values_.Clear();
}
inline ::milvus::proto::plan::GenericValue* RangeExpr::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.plan.RangeExpr.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::plan::GenericValue >*
RangeExpr::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.plan.RangeExpr.values)
  return &values_;
}
inline const ::milvus::proto::plan::GenericValue& RangeExpr::values(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.plan.RangeExpr.values)
  return values_.Get(index);
}
inline ::milvus::proto::plan::GenericValue* RangeExpr::add_values() {
  // @@protoc_insertion_point(field_add:milvus.proto.plan.RangeExpr.values)
  return values_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::plan::GenericValue >&
RangeExpr::values() const {
  // @@protoc_insertion_point(field_list:milvus.proto.plan.RangeExpr.values)
  return values_;
}

// -------------------------------------------------------------------

// Expr

// .milvus.proto.plan.RangeExpr range_expr = 1;
inline bool Expr::has_range_expr() const {
  return expr_case() == kRangeExpr;
}
inline void Expr::set_has_range_expr() {
  _oneof_case_[0] = kRangeExpr;
}
inline void Expr::clear_range_expr() {
  if (has_range_expr()) {
    delete expr_.range_expr_;
    clear_has_expr();
  }
}
inline ::milvus::proto::plan::RangeExpr* Expr::release_range_expr() {
  // @@protoc_insertion_point(field_release:milvus.proto.plan.Expr.range_expr)
  if (has_range_expr()) {
    clear_has_expr();
      ::milvus::proto::plan::RangeExpr* temp = expr_.range_expr_;
    expr_.range_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::milvus::proto::plan::RangeExpr& Expr::range_expr() const {
  // @@protoc_insertion_point(field_get:milvus.proto.plan.Expr.range_expr)
  return has_range_expr()
      ? *expr_.range_expr_
      : *reinterpret_cast< ::milvus::proto::plan::RangeExpr*>(&::milvus::proto::plan::_RangeExpr_default_instance_);
}
inline ::milvus::proto::plan::RangeExpr* Expr::mutable_range_expr() {
  if (!has_range_expr()) {
    clear_expr();
    set_has_range_expr();
    expr_.range_expr_ = CreateMaybeMessage< ::milvus::proto::plan::RangeExpr >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.plan.Expr.range_expr)
  return expr_.range_expr_;
}

inline bool Expr::has_expr() const {
  return expr_case() != EXPR_NOT_SET;
}
inline void Expr::clear_has_expr() {
  _oneof_case_[0] = EXPR_NOT_SET;
}
inline Expr::ExprCase Expr::expr_case() const {
  return Expr::ExprCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// VectorANNS

// bool is_binary = 1;
inline void VectorANNS::clear_is_binary() {
  is_binary_ = false;
}
inline bool VectorANNS::is_binary() const {
  // @@protoc_insertion_point(field_get:milvus.proto.plan.VectorANNS.is_binary)
  return is_binary_;
}
inline void VectorANNS::set_is_binary(bool value) {
  
  is_binary_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.plan.VectorANNS.is_binary)
}

// int64 field_id = 2;
inline void VectorANNS::clear_field_id() {
  field_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VectorANNS::field_id() const {
  // @@protoc_insertion_point(field_get:milvus.proto.plan.VectorANNS.field_id)
  return field_id_;
}
inline void VectorANNS::set_field_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.plan.VectorANNS.field_id)
}

// .milvus.proto.plan.Expr predicates = 3;
inline bool VectorANNS::has_predicates() const {
  return this != internal_default_instance() && predicates_ != nullptr;
}
inline void VectorANNS::clear_predicates() {
  if (GetArenaNoVirtual() == nullptr && predicates_ != nullptr) {
    delete predicates_;
  }
  predicates_ = nullptr;
}
inline const ::milvus::proto::plan::Expr& VectorANNS::predicates() const {
  const ::milvus::proto::plan::Expr* p = predicates_;
  // @@protoc_insertion_point(field_get:milvus.proto.plan.VectorANNS.predicates)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::plan::Expr*>(
      &::milvus::proto::plan::_Expr_default_instance_);
}
inline ::milvus::proto::plan::Expr* VectorANNS::release_predicates() {
  // @@protoc_insertion_point(field_release:milvus.proto.plan.VectorANNS.predicates)
  
  ::milvus::proto::plan::Expr* temp = predicates_;
  predicates_ = nullptr;
  return temp;
}
inline ::milvus::proto::plan::Expr* VectorANNS::mutable_predicates() {
  
  if (predicates_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::plan::Expr>(GetArenaNoVirtual());
    predicates_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.plan.VectorANNS.predicates)
  return predicates_;
}
inline void VectorANNS::set_allocated_predicates(::milvus::proto::plan::Expr* predicates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete predicates_;
  }
  if (predicates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      predicates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predicates, submessage_arena);
    }
    
  } else {
    
  }
  predicates_ = predicates;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.VectorANNS.predicates)
}

// .milvus.proto.plan.QueryInfo query_info = 4;
inline bool VectorANNS::has_query_info() const {
  return this != internal_default_instance() && query_info_ != nullptr;
}
inline void VectorANNS::clear_query_info() {
  if (GetArenaNoVirtual() == nullptr && query_info_ != nullptr) {
    delete query_info_;
  }
  query_info_ = nullptr;
}
inline const ::milvus::proto::plan::QueryInfo& VectorANNS::query_info() const {
  const ::milvus::proto::plan::QueryInfo* p = query_info_;
  // @@protoc_insertion_point(field_get:milvus.proto.plan.VectorANNS.query_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::plan::QueryInfo*>(
      &::milvus::proto::plan::_QueryInfo_default_instance_);
}
inline ::milvus::proto::plan::QueryInfo* VectorANNS::release_query_info() {
  // @@protoc_insertion_point(field_release:milvus.proto.plan.VectorANNS.query_info)
  
  ::milvus::proto::plan::QueryInfo* temp = query_info_;
  query_info_ = nullptr;
  return temp;
}
inline ::milvus::proto::plan::QueryInfo* VectorANNS::mutable_query_info() {
  
  if (query_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::plan::QueryInfo>(GetArenaNoVirtual());
    query_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.plan.VectorANNS.query_info)
  return query_info_;
}
inline void VectorANNS::set_allocated_query_info(::milvus::proto::plan::QueryInfo* query_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete query_info_;
  }
  if (query_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_info, submessage_arena);
    }
    
  } else {
    
  }
  query_info_ = query_info;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.VectorANNS.query_info)
}

// string placeholder_tag = 5;
inline void VectorANNS::clear_placeholder_tag() {
  placeholder_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VectorANNS::placeholder_tag() const {
  // @@protoc_insertion_point(field_get:milvus.proto.plan.VectorANNS.placeholder_tag)
  return placeholder_tag_.GetNoArena();
}
inline void VectorANNS::set_placeholder_tag(const std::string& value) {
  
  placeholder_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:milvus.proto.plan.VectorANNS.placeholder_tag)
}
inline void VectorANNS::set_placeholder_tag(std::string&& value) {
  
  placeholder_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:milvus.proto.plan.VectorANNS.placeholder_tag)
}
inline void VectorANNS::set_placeholder_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  placeholder_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:milvus.proto.plan.VectorANNS.placeholder_tag)
}
inline void VectorANNS::set_placeholder_tag(const char* value, size_t size) {
  
  placeholder_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.plan.VectorANNS.placeholder_tag)
}
inline std::string* VectorANNS::mutable_placeholder_tag() {
  
  // @@protoc_insertion_point(field_mutable:milvus.proto.plan.VectorANNS.placeholder_tag)
  return placeholder_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VectorANNS::release_placeholder_tag() {
  // @@protoc_insertion_point(field_release:milvus.proto.plan.VectorANNS.placeholder_tag)
  
  return placeholder_tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VectorANNS::set_allocated_placeholder_tag(std::string* placeholder_tag) {
  if (placeholder_tag != nullptr) {
    
  } else {
    
  }
  placeholder_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placeholder_tag);
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.VectorANNS.placeholder_tag)
}

// -------------------------------------------------------------------

// PlanNode

// .milvus.proto.plan.VectorANNS vector_anns = 1;
inline bool PlanNode::has_vector_anns() const {
  return node_case() == kVectorAnns;
}
inline void PlanNode::set_has_vector_anns() {
  _oneof_case_[0] = kVectorAnns;
}
inline void PlanNode::clear_vector_anns() {
  if (has_vector_anns()) {
    delete node_.vector_anns_;
    clear_has_node();
  }
}
inline ::milvus::proto::plan::VectorANNS* PlanNode::release_vector_anns() {
  // @@protoc_insertion_point(field_release:milvus.proto.plan.PlanNode.vector_anns)
  if (has_vector_anns()) {
    clear_has_node();
      ::milvus::proto::plan::VectorANNS* temp = node_.vector_anns_;
    node_.vector_anns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::milvus::proto::plan::VectorANNS& PlanNode::vector_anns() const {
  // @@protoc_insertion_point(field_get:milvus.proto.plan.PlanNode.vector_anns)
  return has_vector_anns()
      ? *node_.vector_anns_
      : *reinterpret_cast< ::milvus::proto::plan::VectorANNS*>(&::milvus::proto::plan::_VectorANNS_default_instance_);
}
inline ::milvus::proto::plan::VectorANNS* PlanNode::mutable_vector_anns() {
  if (!has_vector_anns()) {
    clear_node();
    set_has_vector_anns();
    node_.vector_anns_ = CreateMaybeMessage< ::milvus::proto::plan::VectorANNS >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.plan.PlanNode.vector_anns)
  return node_.vector_anns_;
}

inline bool PlanNode::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void PlanNode::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline PlanNode::NodeCase PlanNode::node_case() const {
  return PlanNode::NodeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plan
}  // namespace proto
}  // namespace milvus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::milvus::proto::plan::RangeExpr_OpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::plan::RangeExpr_OpType>() {
  return ::milvus::proto::plan::RangeExpr_OpType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_plan_2eproto
